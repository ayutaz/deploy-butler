name: Build and Deploy All Platforms to itch.io

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: '6000.0.43f1'

jobs:
  build:
    name: Build & Deploy ${{ matrix.targetPlatform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 64bit
          - targetPlatform: StandaloneWindows64
            os: ubuntu-latest # Ubuntuランナーでビルド可能
            itch_channel: windows-x64 # itch.io チャンネル名 (任意)
            artifact_suffix: win64
          # macOS Universal (Intel + Apple Silicon)
          - targetPlatform: StandaloneOSX
            os: macos-latest # macOSランナーが必要
            itch_channel: osx-universal # itch.io チャンネル名 (任意)
            artifact_suffix: osx
          # Linux 64bit
          - targetPlatform: StandaloneLinux64
            os: ubuntu-latest # Ubuntuランナーでビルド可能
            itch_channel: linux-x64 # itch.io チャンネル名 (任意)
            artifact_suffix: linux64
          # WebGL
          - targetPlatform: WebGL
            os: ubuntu-latest # Ubuntuランナーでビルド可能
            itch_channel: webgl # itch.io チャンネル名 (任意)
            artifact_suffix: webgl
          # Android
          - targetPlatform: Android
            os: ubuntu-latest # Ubuntuランナーでビルド可能 (GameCIがSDK/NDKを処理)
            itch_channel: android # itch.io チャンネル名 (任意)
            artifact_suffix: android

    # Matrixで指定されたOSランナーを使用
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          lfs: true

      - name: Maximize Runner Disk Space
        if: runner.os == 'Linux'
        run: |
          echo "Initial disk space:"
          df -h

          echo "Removing swap file..."
          sudo swapoff -a
          sudo rm -f /swapfile

          echo "Removing large pre-installed tools..."
          # .NET SDKs
          sudo rm -rf /usr/share/dotnet
          # Haskell (ghc)
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          # Android SDK/NDK
          sudo rm -rf /usr/local/lib/android
          # CodeQL
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          # Swift
          sudo rm -rf /usr/share/swift
          # Go
          sudo rm -rf /usr/local/go /opt/hostedtoolcache/go
          # Java (OpenJDK)
          sudo rm -rf /usr/lib/jvm/*
          # Ruby tool cache and rvm
          sudo rm -rf /opt/hostedtoolcache/Ruby /home/runner/.rvm
          # Python tool cache (Leaving system Python intact, removing cached versions)
          sudo rm -rf /opt/hostedtoolcache/Python

          echo "Removing packages via apt..."
          # Google Cloud SDK (Firebase CLIとは別)
          sudo apt-get remove -y google-cloud-cli google-cloud-sdk || echo "gcloud not found or removal failed"
          # PHP
          sudo apt-get remove -y php\* || echo "PHP not found or removal failed"
          # Browsers
          sudo apt-get remove -y firefox google-chrome-stable || echo "Browsers not found or removal failed"

          echo "Cleaning apt cache..."
          sudo apt-get autoremove -y
          sudo apt-get clean

          echo "Performing extensive Docker system prune..."
          # Keep Docker itself, but prune unused resources
          sudo docker system prune --volumes -a -f

          echo "Final disk space:"
          df -h

      - name: Cache Unity Library folder
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-

      # 4. Unityプロジェクトのビルド (GameCIを使用)
      - name: Build Unity project for ${{ matrix.targetPlatform }}
        id: build
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload build artifact (${{ matrix.targetPlatform }})
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          retention-days: 1

  deploy:
    name: Deploy All to itch.io
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            itch_channel: windows-x64
          - targetPlatform: StandaloneOSX
            itch_channel: osx-universal
          - targetPlatform: StandaloneLinux64
            itch_channel: linux-x64
          - targetPlatform: WebGL
            itch_channel: webgl
          - targetPlatform: Android
            itch_channel: android
    steps:
      - name: Download build artifact (${{ matrix.targetPlatform }})
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
  
      - name: Upload build to itch.io (${{ matrix.itch_channel }})
        uses: yeslayla/butler-publish-itchio-action@v1.0.3
        env:
          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_API_KEY }}
          CHANNEL: ${{ matrix.itch_channel }}
          ITCH_GAME: dutlter-test
          ITCH_USER: ayousanz
          PACKAGE: build/${{ matrix.targetPlatform }} 